{"version":3,"sources":["webpack:///./src/components/Film/Film.js","webpack:///./src/components/FilmList/FilmList.js","webpack:///./src/models/FilmEntry.js","webpack:///./src/pages/index.js"],"names":["Film","render","film","this","props","title","year","director","reviewRating","reviewComment","genres","_getGenres","join","className","React","Component","FilmList","films","map","i","key","isFirstRow","FilmEntry","row","actors","doc","romance","sciFi","comedy","crime","drama","horror","thriller","action","fantasy","animation","dtw","Object","keys","filter","genreName","IndexPage","state","searchValue","selectedGenre","_requestFilms","bind","_initGapi","_setSearchValue","_renderGenre","componentDidMount","setTimeout","gapi","load","componentDidUpdate","console","log","client","init","apiKey","clientId","discoveryDocs","scope","then","catch","err","sheets","spreadsheets","values","get","spreadsheetId","range","response","rows","result","allFilms","length","filmEntry","push","setState","error","e","target","value","_renderInputForm","type","onChange","_renderGenres","genre","genreStyle","padding","cursor","fontWeight","onClick","style","filmsToRender","toLowerCase","includes","src","alt"],"mappings":"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","file":"component---src-pages-index-js-30798ed5ae239cf37192.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport \"./film.css\";\n\nclass Film extends React.Component {\n    render() {\n        const film = this.props.film;\n        if (!film.title) return null;\n\n        const { title, year, director, reviewRating, reviewComment } = film;\n        const genres = film._getGenres().join(\", \");\n        return (\n            <div className=\"film\">\n                <span className=\"film__title\">\n                    {title} {reviewRating}\n                </span>\n                <div>\n                    {genres} | {year} | {director}\n                </div>\n                <div>{reviewComment}</div>\n            </div>\n        );\n    }\n}\n\nFilm.propTypes = {\n    film: PropTypes.object,\n    isFirstRow: PropTypes.bool,\n};\n\nexport default Film;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Film from \"../Film/Film\";\n\nclass FilmList extends React.Component {\n    render() {\n        const { films } = this.props;\n\n        return (\n            <div>\n                {films.map((film, i) => (\n                    <Film film={film} key={i} isFirstRow={i === 0} />\n                ))}\n            </div>\n        );\n    }\n}\n\nFilmList.propTypes = {\n    films: PropTypes.array,\n};\n\nexport default FilmList;\n","class FilmEntry {\n    constructor(row) {\n        this.title = row[0];\n        this.year = row[1] || \"\";\n        this.director = row[15] || \"\";\n        this.actors = row[14] || \"\";\n        this.reviewRating = row[17] || \"\";\n        this.reviewComment = row[18] || \"\";\n\n        this.genres = {\n            doc: !!row[2],\n            romance: !!row[3],\n            sciFi: !!row[4],\n            comedy: !!row[5],\n            crime: !!row[6],\n            drama: !!row[7],\n            horror: !!row[8],\n            thriller: !!row[9],\n            action: !!row[10],\n            fantasy: !!row[11],\n            animation: !!row[12],\n            dtw: !!row[13],\n        };\n    }\n\n    _getGenres() {\n        const keys = Object.keys(this.genres);\n        return keys.filter(genreName => !!this.genres[genreName]);\n    }\n}\n\nexport default FilmEntry;\n","/* global gapi */\n\nimport React from \"react\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport FilmList from \"../components/FilmList/FilmList\";\nimport FilmEntry from \"../models/FilmEntry\";\n\nimport films from \"../../data/films\";\n\nconst SPREADSHEET_ID = \"1eH17SHg_JACgmAe3VJ3fOATLcTC0QwLkK42iyjp1IJE\";\nconst API_KEY = \"AIzaSyDU7ArjrrMpoVsFVkXha32sPUWff7yqYBY\";\nconst CLIENT_ID =\n    \"759156115005-rj8aq7fuo23b867u1ddnjsmso32gls40.apps.googleusercontent.com\";\n\nconst USE_DUMMY_DATA = false;\n\nclass IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            films: null,\n            genres: null,\n            searchValue: \"\",\n            selectedGenre: null,\n        };\n\n        this._requestFilms = this._requestFilms.bind(this);\n        this._initGapi = this._initGapi.bind(this);\n        this._setSearchValue = this._setSearchValue.bind(this);\n        this._renderGenre = this._renderGenre.bind(this);\n    }\n\n    componentDidMount() {\n        if (USE_DUMMY_DATA) {\n            const allFilms = films.values\n                .slice(2, films.values.length)\n                .map(film => new FilmEntry(film));\n\n            const genres = Object.keys(allFilms[0].genres);\n            return this.setState({\n                films: allFilms,\n                genres: genres,\n            });\n        }\n\n        setTimeout(() => {\n            gapi.load(\"client\", this._initGapi);\n        }, 1000);\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.searchValue);\n    }\n\n    _initGapi() {\n        gapi.client\n            .init({\n                apiKey: API_KEY,\n                clientId: CLIENT_ID,\n                discoveryDocs: [\n                    \"https://sheets.googleapis.com/$discovery/rest?version=v4\",\n                ],\n                scope: \"https://www.googleapis.com/auth/spreadsheets.readonly\",\n            })\n            .then(this._requestFilms)\n            .catch(err => {\n                console.log(\"error initing gapi\", err);\n            });\n    }\n\n    _requestFilms() {\n        console.log(\"Requesting films...\");\n\n        gapi.client.sheets.spreadsheets.values\n            .get({\n                spreadsheetId: SPREADSHEET_ID,\n                range: \"Sheet1!B:T\",\n            })\n            .then(response => {\n                const rows = response.result;\n                const allFilms = [];\n                for (let i = 2; i < rows.values.length; i++) {\n                    const filmEntry = new FilmEntry(rows.values[i]);\n                    allFilms.push(filmEntry);\n                }\n\n                const genres = Object.keys(allFilms[0].genres);\n                this.setState({\n                    films: allFilms,\n                    genres: genres,\n                });\n            })\n            .catch(err => {\n                console.error(\"error making spreadsheet request:\", err);\n            });\n    }\n\n    _setSearchValue(e) {\n        this.setState({\n            searchValue: e.target.value\n        });\n    }\n\n    _renderInputForm() {\n        return (\n            <input\n                type=\"text\"\n                value={this.state.searchValue}\n                onChange={this._setSearchValue}\n            />\n        );\n    }\n\n    _renderGenres() {\n        if (!this.state.genres) return null;\n\n        return this.state.genres.map(genre => {\n            return this._renderGenre(genre);\n        })\n    }\n\n    _renderGenre(genre) {\n        const genreStyle = {\n            padding: \"0 2px\",\n            cursor: \"pointer\",\n            fontWeight: genre === this.state.selectedGenre ? \"bold\" : \"normal\"\n        }\n\n        return (\n            <span onClick={() => this.setState({selectedGenre: genre})} style={genreStyle}>\n                {genre}\n            </span>\n        );\n    }\n\n    render() {\n        let filmsToRender = this.state.films;\n        if (filmsToRender && this.state.searchValue) {\n            filmsToRender = this.state.films.filter(film =>\n                film.title.toLowerCase().includes(this.state.searchValue.toLowerCase())\n            );\n        }\n\n        if (filmsToRender && this.state.selectedGenre) {\n            filmsToRender = this.state.films.filter(film =>\n                film.genres[this.state.selectedGenre] === true\n            );\n        }\n\n        return (\n            <Layout>\n                <SEO title=\"Home\" />\n\n                {!this.state.films && (\n                    <img\n                        src=\"https://i.gifer.com/ZJtI.gif\"\n                        alt=\"potatoes loading\"\n                    />\n                )}\n\n                {!!filmsToRender && (\n                    <div>\n                        {this._renderInputForm()}\n                        {this._renderGenres()}\n                        <FilmList films={filmsToRender} />\n                    </div>\n                )}\n            </Layout>\n        );\n    }\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}